// Copyright 2022 The Pigweed Authors
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

import type {NextPage} from 'next'
import Head from 'next/head'
import styles from '../styles/Home.module.scss';
import Log from "../components/log";
import Repl from "../components/repl";
import TransportMode from "../components/transportMode";
import Connect from "../components/connect";
import BtnUploadDB from '../components/uploadDb';
import {WebSerial, Device} from "pigweedjs";
import {useState} from 'react';
import {initializeApp} from "@firebase/app";
import {Analytics, getAnalytics, logEvent} from "@firebase/analytics";
import {RemoteConfig, getRemoteConfig, getValue, fetchAndActivate} from "@firebase/remote-config";
import {SetValueRequest, SetValueResponse} from "../protos/app/proto/demo_pb";
type WebSerialTransport = WebSerial.WebSerialTransport


const firebaseConfig = {
  apiKey : process.env.API_KEY,
  authDomain : process.env.AUTH_DOMAIN,
  projectId : process.env.PROJECT_ID,
  storageBucket : process.env.STORAGE_BUCKER,
  messagingSenderId : process.env.MESSAGING_SENDER_ID,
  appId : process.env.APP_ID,
  measurementId : process.env.MEASUREMENT_ID
};

const firebase = initializeApp(firebaseConfig);
let analytics: Analytics | undefined;
let remoteConfig: RemoteConfig | undefined;
if (typeof window !== 'undefined') {
  analytics = getAnalytics(firebase);
  remoteConfig = getRemoteConfig(firebase);
  fetchAndActivate(remoteConfig).then(() => {
    console.log("Fetched remote config");
  }).catch((err) => {
    console.log("Failed to fetch remote config: " + err);
  });
}

const Home: NextPage = () => {
  const [transport, setTransport] = useState<WebSerialTransport | undefined>(undefined);
  const [device, setDevice] = useState<Device | undefined>(undefined);
  const [tokenDB, setTokenDB] = useState("");
  const [mode, setMode] = useState("raw");
  return (
    <div className={styles.container}>
      <Head>
        <title>Pigweed Console</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.png" />
      </Head>

      <main className={styles.main}>
        <div className={styles.toolbar}>
          <span className={styles.logo}><span>Pigweed</span> Web Console</span>
          <Connect onConnection={(transport, device) => {
            if (device && remoteConfig) {
              const value = getValue(remoteConfig, 'number_value').asNumber();
              console.log("Remove value: " + value);
              const request = new SetValueRequest();
              request.setKey('number_value');
              request.setIntValue(value);
              device.client.channel(1).methodStub('rpc_demo.remoteconfig.RemoteConfig.SetValue')
                  .invoke(request, (response: SetValueResponse) => {
                    console.log(response);
                  });
            }
            setTransport(transport);
            setDevice(device);
            if (analytics !== undefined) {
              logEvent(analytics, "device_connected");
            }
          }} currentMode={mode}/>
          <BtnUploadDB onUpload={(db) => {
            if (analytics !== undefined) {
              logEvent(analytics, "token_db_uploaded");
            }
            setTokenDB(db);
          }} />
          <TransportMode currentMode={mode} onChange={(mode) => {
            if (analytics !== undefined) {
              logEvent(analytics, "transport_mode", {"mode": mode});
            }
            setMode(mode);
          }} />
        </div>

        <div className={styles.grid}>
          <div>
            <Log device={device} transport={transport} tokenDB={tokenDB} mode={mode} ></Log>
          </div>
          {/*<div>*/}
          {/*  <Repl device={undefined}></Repl>*/}
          {/*</div>*/}
        </div>
      </main>
    </div>
  )
}

export default Home;
